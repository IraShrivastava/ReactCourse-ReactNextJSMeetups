{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\IRA\\\\Desktop\\\\React\\\\react-nextjs-meetups\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://Ira0211:3EL2u8ync3isqKn@cluster0.9auyg.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://Ira0211:3EL2u8ync3isqKn@cluster0.9auyg.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        image: selectedMeetup.image,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/IRA/Desktop/React/react-nextjs-meetups/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBACI,QAAC,YAAD;AAEI,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAF5B;AAGI,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAH5B;AAII,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAJ9B;AAKI,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AALlC;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;AAED,OAAO,eAAeC,cAAf,GAA+B;AAElC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,sGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAE,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA3B,EAAoCC,OAApC,EAArB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CACHC,MAAM,KACF;AACIC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AADN;AADZ,KADE,CADH;AAFJ,GAAP;AAYH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AACzC,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,sGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAE,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAACb,IAAAA,GAAG,EAACjB,QAAQ,CAACyB,QAAD;AAAb,GAA1B,CAA5B;AAGAf,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACHhB,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAC;AACP2B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADG;AAEPpB,QAAAA,KAAK,EAACuB,cAAc,CAACvB,KAFd;AAGPD,QAAAA,KAAK,EAACwB,cAAc,CAACxB,KAHd;AAIPE,QAAAA,OAAO,EAACsB,cAAc,CAACtB,OAJhB;AAKPC,QAAAA,WAAW,EAACqB,cAAc,CAACrB;AALpB;AADR;AADJ,GAAP;AAWH;AAED,eAAeN,aAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\"\r\n\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\"\r\n\r\nfunction MeetupDetails(props) {\r\n    return(\r\n        <MeetupDetail \r\n\r\n            image={props.meetupData.image}\r\n            title={props.meetupData.title}\r\n            address={props.meetupData.address}\r\n            description={props.meetupData.description} />\r\n    )\r\n}\r\n\r\nexport async function getStaticPaths(){\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://Ira0211:3EL2u8ync3isqKn@cluster0.9auyg.mongodb.net/meetups?retryWrites=true&w=majority')\r\n    const db = client.db()\r\n\r\n    const meetupsCollection = db.collection('meetups')\r\n\r\n    const meetups= await meetupsCollection.find({}, {_id:1}).toArray()\r\n\r\n    client.close()\r\n\r\n    return {\r\n        fallback: false,\r\n        paths: meetups.map(\r\n            meetup => (\r\n                { \r\n                    params: { \r\n                        meetupId: meetup._id.toString()\r\n                    }\r\n                }\r\n            )\r\n        )\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context){\r\n    const meetupId = context.params.meetupId\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://Ira0211:3EL2u8ync3isqKn@cluster0.9auyg.mongodb.net/meetups?retryWrites=true&w=majority')\r\n    const db = client.db()\r\n\r\n    const meetupsCollection = db.collection('meetups')\r\n\r\n    const selectedMeetup= await meetupsCollection.findOne({_id:ObjectId(meetupId)})\r\n\r\n\r\n    client.close()\r\n    return {\r\n        props: {\r\n            meetupData:{\r\n                id: selectedMeetup._id.toString(),\r\n                title:selectedMeetup.title,\r\n                image:selectedMeetup.image,\r\n                address:selectedMeetup.address,\r\n                description:selectedMeetup.description\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default MeetupDetails"]},"metadata":{},"sourceType":"module"}